name: Build Flutter App

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating system to run on'
        required: true
        type: string
        default: 'ubuntu-latest'
      platform:
        description: 'Platform to build for (android/ios)'
        required: true
        type: string
      build_target:
        description: 'Main entry point file'
        required: false
        type: string
        default: 'lib/main.dart'
      artifact_retention_days:
        description: 'Number of days to retain artifacts'
        required: false
        type: number
        default: 7
      build_apk:
        description: 'Build APK file'
        required: false
        type: boolean
        default: true
      build_aab:
        description: 'Build App Bundle (AAB) file'
        required: false
        type: boolean
        default: true
      flutter_version:
        description: 'Flutter version to use'
        required: false
        type: string
        default: '3.24.0'
      run_tests:
        description: 'Run Flutter tests'
        required: false
        type: boolean
        default: false
      build_ios:
        description: 'Build iOS IPA'
        required: false
        type: boolean
        default: true
      bundle_id:
        description: 'iOS Bundle ID (e.g., com.example.app)'
        required: false
        type: string
    secrets:
      # Android secrets
      KEYSTORE_BASE64:
        description: 'Base64 encoded keystore file'
        required: false
      KEY_PROPERTIES:
        description: 'Key properties file content'
        required: false
      # iOS secrets
      P12_BASE64:
        description: 'Base64 encoded P12 certificate'
        required: false
      PROVISIONING_PROFILE:
        description: 'Base64 encoded provisioning profile'
        required: false
      P12_PASSWORD:
        description: 'Password for P12 certificate'
        required: false
      PERSONAL_ACCESS_TOKEN:
        description: 'Personal Access Token for private repository access'
        required: false

jobs:
  build:
    runs-on: ${{ inputs.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Cache Flutter
      uses: actions/cache@v3
      with:
        path: |
          ~/.flutter
          ~/.pub-cache
        key: flutter-${{ inputs.flutter_version }}-${{ runner.os }}
        restore-keys: |
          flutter-${{ inputs.flutter_version }}-
          flutter-

    - name: Configure Git for private repositories
      run: |
        git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
        git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
        echo "Git configuration updated for private repository access"
        echo "Git config list:"
        git config --global --list | grep url

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ inputs.flutter_version }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Update CocoaPods specs (iOS only)
      if: inputs.platform == 'ios' && inputs.build_ios == true
      run: |
        cd ios
        # Clean CocoaPods cache and lock files
        rm -rf Pods/
        rm -f Podfile.lock
        
        # Update iOS deployment target to 13.0
        echo "Updating iOS deployment target to 13.0..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' Podfile
        
        # Force update all Pods to iOS 13.0+
        echo "post_install do |installer|" >> Podfile
        echo "  installer.pods_project.targets.each do |target|" >> Podfile
        echo "    target.build_configurations.each do |config|" >> Podfile
        echo "      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'" >> Podfile
        echo "    end" >> Podfile
        echo "  end" >> Podfile
        echo "end" >> Podfile
        
        pod repo update
        pod install

    - name: Extract app version
      id: version
      run: |
        # Check if this is a tag build (released/*)
        if [[ "${{ github.ref }}" == refs/tags/released/* ]]; then
          # Extract version from tag (released/v1.0.0 -> v1.0.0)
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/released\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from tag: $VERSION"
        else
          # Use version from pubspec.yaml
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from pubspec.yaml: $VERSION"
        fi

    - name: Run tests
      if: inputs.run_tests == true
      run: flutter test

    - name: Setup Android keystore (Android only)
      if: inputs.platform == 'android'
      run: |
        # Decode keystore file
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        
        # Create key.properties file if it doesn't exist or override it
        echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
        
        # Verify the files were created
        echo "Keystore file created: $(ls -la android/app/keystore.jks)"
        echo "Key properties file created: $(ls -la android/key.properties)"

    - name: Build Android APK
      if: inputs.platform == 'android' && inputs.build_apk == true
      run: |
        # Check if key.properties exists for release build
        if [ -f "android/key.properties" ]; then
          echo "Building signed APK with keystore..."
          flutter build apk --release --target ${{ inputs.build_target }}
        else
          echo "Building unsigned APK (development build)..."
          flutter build apk --release --target ${{ inputs.build_target }}
        fi

    - name: Build Android App Bundle
      if: inputs.platform == 'android' && inputs.build_aab == true
      run: |
        # Check if key.properties exists for release build
        if [ -f "android/key.properties" ]; then
          echo "Building signed App Bundle with keystore..."
          flutter build appbundle --release --target ${{ inputs.build_target }}
        else
          echo "Building unsigned App Bundle (development build)..."
          flutter build appbundle --release --target ${{ inputs.build_target }}
        fi

    - name: Setup iOS certificates (iOS only)
      if: inputs.platform == 'ios' && inputs.build_ios == true
      run: |
        echo "=== Starting iOS Certificate Setup ==="
        echo "Platform: ${{ inputs.platform }}"
        echo "Build iOS: ${{ inputs.build_ios }}"
        
        # Create keychain
        echo "Creating keychain..."
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        echo "✅ Keychain created and unlocked"
        
        # Import certificate
        echo "Importing P12 certificate..."
        echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
        echo "P12 file size: $(ls -la certificate.p12 | awk '{print $5}') bytes"
        
        security import certificate.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
        echo "✅ P12 certificate imported"
        
        # Import provisioning profile
        echo "Importing provisioning profile..."
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
        echo "Provisioning profile size: $(ls -la profile.mobileprovision | awk '{print $5}') bytes"
        
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        echo "✅ Provisioning profile copied"
        
        # Set certificate identity
        echo "Finding certificate identity..."
        security find-identity -v -p codesigning build.keychain
        
        # Set keychain partition list (important for codesign)
        echo "Setting keychain partition list..."
        security set-key-partition-list -S apple-tool:,apple:,codesign: -k "" build.keychain
        echo "✅ Keychain partition list set"
        
        # Set keychain search list
        echo "Setting keychain search list..."
        security list-keychains -d user -s build.keychain
        echo "✅ Keychain search list set"
        
        # Get certificate identity
        CERT_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | awk '{print $2}')
        echo "Certificate Identity: $CERT_IDENTITY"
        
        # Debug: List all certificates
        echo "=== All certificates in keychain ==="
        security find-identity -v build.keychain
        
        # Debug: Check provisioning profiles
        echo "=== Provisioning profiles ==="
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Debug: Check keychain settings
        echo "=== Keychain settings ==="
        security show-keychain-info build.keychain
        
        # Debug: Set keychain timeout
        security set-keychain-settings -t 3600 -l build.keychain
        echo "✅ Keychain timeout set to 3600 seconds"
        
        echo "=== iOS Certificate Setup Complete ==="

    - name: Build iOS IPA
      if: inputs.platform == 'ios' && inputs.build_ios == true
      run: |
        echo "=== Starting iOS Build ==="
        
        # Create new keychain for this step
        echo "=== Creating build2 keychain ==="
        # Delete existing keychain if it exists
        security delete-keychain build2.keychain 2>/dev/null || true
        security create-keychain -p "" build2.keychain
        security default-keychain -s build2.keychain
        security unlock-keychain -p "" build2.keychain
        
        # Import certificate again
        echo "=== Re-importing certificate ==="
        echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build2.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
        
        # Set keychain partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign: -k "" build2.keychain
        
        # Verify certificate
        echo "=== Available certificates ==="
        security find-identity -v -p codesigning build2.keychain
        # Set Bundle ID
        if [ -n "${{ inputs.bundle_id }}" ]; then
          echo "=== Using Bundle ID from input parameter ==="
          BUNDLE_ID="${{ inputs.bundle_id }}"
          echo "Bundle ID: $BUNDLE_ID"
        else
          echo "=== Extracting Bundle ID from Provisioning Profile ==="
          BUNDLE_ID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p - | grep "application-identifier" | sed 's/.*S23HMD548J\.//' | tr -d '"' | tr -d ' ')
          echo "Extracted Bundle ID: $BUNDLE_ID"
        fi
        
        # Check current Bundle ID in Info.plist
        echo "=== Current Bundle ID in Info.plist ==="
        plutil -p ios/Runner/Info.plist | grep CFBundleIdentifier
        
        # Set Bundle ID
        echo "Setting Bundle ID..."
        plutil -replace CFBundleIdentifier -string "$BUNDLE_ID" ios/Runner/Info.plist
        
        # Verify Bundle ID
        echo "=== Bundle ID after setting ==="
        plutil -p ios/Runner/Info.plist | grep CFBundleIdentifier
        
        # Check provisioning profile details
        echo "=== Provisioning Profile Details ==="
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p -
        
        # Disable automatic code signing and remove provisioning profiles
        echo "Disabling automatic code signing and removing provisioning profiles..."
        sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*;//' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/PROVISIONING_PROFILE = .*;//' ios/Runner.xcodeproj/project.pbxproj
        
        # Remove provisioning profiles from Pods project
        echo "Removing provisioning profiles from Pods project..."
        sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*;//' ios/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' 's/PROVISIONING_PROFILE = .*;//' ios/Pods/Pods.xcodeproj/project.pbxproj
        
        # Set DEVELOPMENT_TEAM for Runner target
        echo "Setting DEVELOPMENT_TEAM for Runner target..."
        sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = S23HMD548J;/' ios/Runner.xcodeproj/project.pbxproj
        
        # Get certificate identity
        CERT_IDENTITY=$(security find-identity -v -p codesigning build2.keychain | grep "Apple Distribution" | awk '{print $2}')
        echo "Using Certificate Identity: $CERT_IDENTITY"
        
        # Get provisioning profile UUID
        PROFILE_UUID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p - | grep "UUID" | awk '{print $3}' | tr -d '"')
        echo "Using Provisioning Profile UUID: $PROFILE_UUID"
        
        # Set keychain for Flutter
        echo "Setting keychain for Flutter..."
        export KEYCHAIN_PATH=$(pwd)/build2.keychain
        export KEYCHAIN_PASSWORD=""
        
        # Build Flutter iOS with manual code signing
        echo "Building Flutter iOS app with manual code signing..."
        flutter build ios --release --target ${{ inputs.build_target }} --no-codesign
        echo "✅ Flutter iOS build completed"
        
        # Build Xcode archive with manual code signing
        echo "Building Xcode archive with manual code signing..."
        cd ios
        
        # Get certificate identity
        CERT_IDENTITY=$(security find-identity -v -p codesigning ~/Library/Keychains/build2.keychain-db | grep "Apple Distribution" | awk '{print $2}')
        
        # Get provisioning profile UUID
        PROFILE_UUID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p - | grep "UUID" | awk '{print $3}' | tr -d '"')
        
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="$CERT_IDENTITY" \
          DEVELOPMENT_TEAM="S23HMD548J" \
          archive
        echo "✅ Xcode archive completed"
        
        # Export IPA
        echo "Exporting IPA..."
        xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ -exportOptionsPlist ExportOptions.plist
        echo "✅ IPA export completed"
        
        # Check generated files
        echo "=== Generated files ==="
        ls -la build/
        ls -la build/*.ipa
        
        echo "=== iOS Build Complete ==="

    - name: Upload Android APK
      if: inputs.platform == 'android' && inputs.build_apk == true
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ steps.version.outputs.version }}.apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true

    - name: Upload Android App Bundle
      if: inputs.platform == 'android' && inputs.build_aab == true
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle-${{ steps.version.outputs.version }}.aab
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true

    - name: Upload iOS IPA
      if: inputs.platform == 'ios' && inputs.build_ios == true
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa-${{ steps.version.outputs.version }}.ipa
        path: ios/build/Runner.ipa
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true
