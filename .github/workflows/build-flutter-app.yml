name: Build Flutter App

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating system to run on'
        required: true
        type: string
        default: 'ubuntu-latest'
      platform:
        description: 'Platform to build for (android/ios)'
        required: true
        type: string
      build_target:
        description: 'Main entry point file'
        required: false
        type: string
        default: 'lib/main.dart'
      artifact_retention_days:
        description: 'Number of days to retain artifacts'
        required: false
        type: number
        default: 7
      build_apk:
        description: 'Build APK file'
        required: false
        type: boolean
        default: true
      build_aab:
        description: 'Build App Bundle (AAB) file'
        required: false
        type: boolean
        default: true
      flutter_version:
        description: 'Flutter version to use'
        required: false
        type: string
        default: '3.24.0'
      run_tests:
        description: 'Run Flutter tests'
        required: false
        type: boolean
        default: false
      build_ios:
        description: 'Build iOS IPA'
        required: false
        type: boolean
        default: true
    secrets:
      # Android secrets
      KEYSTORE_BASE64:
        description: 'Base64 encoded keystore file'
        required: false
      KEY_PROPERTIES:
        description: 'Key properties file content'
        required: false
      # iOS secrets
      P12_BASE64:
        description: 'Base64 encoded P12 certificate'
        required: false
      PROVISIONING_PROFILE:
        description: 'Base64 encoded provisioning profile'
        required: false
      P12_PASSWORD:
        description: 'Password for P12 certificate'
        required: false
      PERSONAL_ACCESS_TOKEN:
        description: 'Personal Access Token for private repository access'
        required: false

jobs:
  build:
    runs-on: ${{ inputs.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Configure Git for private repositories
      run: |
        git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
        git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
        echo "Git configuration updated for private repository access"
        echo "Git config list:"
        git config --global --list | grep url

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ inputs.flutter_version }}
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Extract app version
      id: version
      run: |
        # Check if this is a tag build (released/*)
        if [[ "${{ github.ref }}" == refs/tags/released/* ]]; then
          # Extract version from tag (released/v1.0.0 -> v1.0.0)
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/released\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from tag: $VERSION"
        else
          # Use version from pubspec.yaml
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from pubspec.yaml: $VERSION"
        fi

    - name: Run tests
      if: inputs.run_tests == true
      run: flutter test

    - name: Setup Android keystore (Android only)
      if: inputs.platform == 'android'
      run: |
        # Decode keystore file
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        
        # Create key.properties file if it doesn't exist or override it
        echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
        
        # Verify the files were created
        echo "Keystore file created: $(ls -la android/app/keystore.jks)"
        echo "Key properties file created: $(ls -la android/key.properties)"

    - name: Build Android APK
      if: inputs.platform == 'android' && inputs.build_apk == true
      run: |
        # Check if key.properties exists for release build
        if [ -f "android/key.properties" ]; then
          echo "Building signed APK with keystore..."
          flutter build apk --release --target ${{ inputs.build_target }}
        else
          echo "Building unsigned APK (development build)..."
          flutter build apk --release --target ${{ inputs.build_target }}
        fi

    - name: Build Android App Bundle
      if: inputs.platform == 'android' && inputs.build_aab == true
      run: |
        # Check if key.properties exists for release build
        if [ -f "android/key.properties" ]; then
          echo "Building signed App Bundle with keystore..."
          flutter build appbundle --release --target ${{ inputs.build_target }}
        else
          echo "Building unsigned App Bundle (development build)..."
          flutter build appbundle --release --target ${{ inputs.build_target }}
        fi

    - name: Setup iOS certificates (iOS only)
      if: inputs.platform == 'ios' && inputs.build_ios == true
      run: |
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        
        # Import certificate
        echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
        
        # Import provisioning profile
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Set certificate identity
        security find-identity -v -p codesigning build.keychain

    - name: Build iOS IPA
      if: inputs.platform == 'ios' && inputs.build_ios == true
      run: |
        flutter build ios --release --target ${{ inputs.build_target }}
        cd ios
        xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination generic/platform=iOS -archivePath build/Runner.xcarchive archive
        xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ -exportOptionsPlist ExportOptions.plist

    - name: Upload Android APK
      if: inputs.platform == 'android' && inputs.build_apk == true
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ steps.version.outputs.version }}.apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true

    - name: Upload Android App Bundle
      if: inputs.platform == 'android' && inputs.build_aab == true
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle-${{ steps.version.outputs.version }}.aab
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true

    - name: Upload iOS IPA
      if: inputs.platform == 'ios' && inputs.build_ios == true
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa-${{ steps.version.outputs.version }}.ipa
        path: ios/build/Runner.ipa
        retention-days: ${{ inputs.artifact_retention_days }}
        overwrite: true
